// Copyright (c) 2018 The Trapelo Group LLC
// This software is licensed under the MIT License (MIT).
// For more information see LICENSE or https://opensource.org/licenses/MIT

package ttg
package react

// based on commit: reason-react 33dfca3

import scala.scalajs.js
import js.|
import js.annotation._
import js.JSConverters._
import js.Dynamic.{literal => lit}
import org.scalajs.dom
import dom.html


// /** Marker for JS side props. */
// sealed trait JsProps extends js.Object
// sealed trait ReactRef extends js.Object

/** Subscription effect. */
case class Subscription[Token](gen: Unit => Token, use: Token => Unit)

/**
 * A component in scala world are book-keeping structures, functions and state managers
 * all collected together in one specification object.
 *
 * @param S State
 * @param IS Initial state, usually a reduce set of S. (NEEDED?)
 * @param RP Retained props.
 * @param IRP Initial retaired props. (NEEDED?)
 * @param A Action type for in-component reducer.
 */
case class ComponentSpec[S, RP, IRP, A](
  /** Component name. Also pushed down into the js side. */
  debugName: String,
  /** Value returned by scalareact.createClass. */
  reactClassInternal: ReactClass,
  /** Retained props. This can change??? Is this mutable? */
  retainedProps: Option[IRP],
  initialState: Option[Unit => Option[S]],
  didMount: Option[Self[S, RP, A] => StateUpdate[S, RP, A]],
  willReceiveProps: Option[Self[S, RP, A] => Option[S]],
  /** The only required function in a component. */
  render: Self[S, RP, A] => ReactElement,
  /** State management via reducer concept. */
  reducer: (A, Option[S]) => StateUpdate[S, RP, A],
  /** Only used when we wrap a js-side element inside of scala. */
  jsElementWrapped: Option[JsElementWrapped],
  didUpdate: Option[OldNewSelf[S, RP, A] => Unit]

) {
  def withInitialState(is: Unit => Option[S]) = this.copy(initialState = Some(is))
  def withDidMount(f: Self[S,RP,A] => StateUpdate[S, RP, A]) = this.copy(didMount = Some(f))
  /** Override the default render method. The default renders "Not Implemented" */
  def withRender(f: Self[S,RP,A] => ReactElement) = this.copy(render = f)
  def willReceiveProps(f: Self[S,RP,A] => Option[S]) = this.copy(willReceiveProps = Some(f))
  def withReducer(f: (A, Option[S]) => StateUpdate[S, RP, A]) = this.copy(reducer = f)
}

/**
 * scala-side element that simply wraps a ComponentSpec.
 */
sealed trait Element
case class ScalaElement[S, RP, A](component: Component[S, RP, A]) extends Element

/**
 * Fake "this/self" used to call the scala react methods provided by the client.
 * Each lifecycle call receives an instance as the first parameter.
 */
case class Self[S, RP, A](
  /** Component state. */
  val state: Option[S],
  /** Props to pass through. */
  val retainedProps: Option[RP],
  /** Execute an action in the component's reducer. Should this be wrapped in an effect? */
  val send: A => Unit,
  ///** Reduce, old API */
  //val reduce: (js.Any => A, js.Any) => Unit,
  /** Callback handling (feels rather awkward at the moment). */
  val handle: (Self[S, RP, A] => Unit) => Unit
)

/** Allows prev/next comparisons. */
trait OldNewSelf[S, RP, A] extends js.Object {
  def oldSelf: Self[S, RP, A]
  def newSelf: Self[S, RP, A]
}

// /**
//  * Convert js-side props to a Component similar to the "make" methods
//  * that are used to create Components from scala props.
//  *
//  * TODO: Convert to monadic structure.
//  */
// trait JsPropsToScala[S, RP, A] extends (js.Any => Component[S, RP, A])

/**
 * In the js-side "class" component, the props hold a special member called scalaProps.
 * We cast the js object to this structure to extract out scalaProps on the scala-side,
 * which could be null or undefined. P is a ScalaElement typically.
 */
@js.native
trait JSComponentThisProps[P] extends js.Object {
  // "this.props" will have other properties...
  /** We hang our interop component on this property. */
  val scalaProps: js.UndefOr[P] = js.native
}

/**
 * A js-side component as seen by scala. scalareact.createClass creates a react
 * "class" component. In the shim/proxy methods scala side, the js "this" value
 * can be exposed as the following type which should represent that "class"
 * component. We only need access to a few values/methods.  This can also be
 * overlaid wih a ComponentSpec.reactInternalClass.
 */
@js.native
trait JsComponentThis[S, P, RP, A] extends CommonMethods[S, RP, A] {
  /** this.state is a TotalState on the scala side. */
  def state: TotalState[S, RP, A]
  /** The this.setState function uses TotalState. This only exposes the updater function setState approach. */
  def setState: js.ThisFunction1[js.Any, js.Function2[TotalState[S, RP, A], P, TotalState[S, RP, A]], Unit]
  /** this.props *may* have a scalaProps property where we hook our ComponentSpec into.  */
  def props: JSComponentThisProps[ScalaElement[S, RP, A]]
  /**
   * Convert raw js props to scala side props. This conversion is only used when
   * a scala side component is "exported" for js-side use.
   */
  var jsPropsToScala: js.UndefOr[JsPropsToScala[S, RP, A]]
}

/**
 * State proxy on the scala side stored in this.state. Kept as a js object.
 */
class TotalState[S, RP, A](
  /** Actual client provided state. */
  val scalaState: Option[S],
  /** Version number of state i.e. optimistic concurrency. */
  val scalaStateVersion: Int,
  val scalaStateVersionUsedToComputeSubelements: Int,
  /** Side effects to execute, if any. */
  val sideEffects: Seq[Self[S, RP, A] => Unit]
) extends js.Object

// State updating requests types.
sealed trait StateUpdate[S, RP, A]
case class NoUpdate[S, RP, A]() extends StateUpdate[S, RP, A]
case class Update[S, RP, A](s: Option[S]) extends StateUpdate[S, RP, A]
case class SilentUpdate[S, RP, A](s: Option[S]) extends StateUpdate[S, RP, A]
case class SideEffects[S, RP, A](self: Self[S, RP,A] => Unit) extends StateUpdate[S, RP, A]
case class UpdateWithSideEffects[S, RP, A](s: Option[S], effect: Self[S, RP, A] => Unit) extends StateUpdate[S, RP, A]
case class SilentUpdateWithSideEffects[S, RP, A](s: Option[S], effect: Self[S, RP, A] => Unit) extends StateUpdate[S, RP, A]

object reactelements {

  /**
   * If the props arg contains a `scalaProps` member return it
   * directly. Otherwise, convert the entire js props object using
   * jsPropsToScala if that has a value. The scala-side proxy uses this to
   * extract out "scala props" stashed in the js props data structure.
   *
   * Not sure this works right. If we have exported a component but we still use
   * it internally, I don't think we want to use jsPropsToScal in the scala
   * world only when coming in from js world but exorting causes that converter
   * to appear.
   */
  def convertPropsIfTheyAreFromJs[S, RP, A](
    props: JSComponentThisProps[ScalaElement[S, RP, A]],
    jsPropsToScala: Option[JsPropsToScala[S, RP, A]],
    debugName: String): ScalaElement[S, RP, A] = {
    val scalaProps: Option[ScalaElement[S,RP,A]] = props.scalaProps.toOption
      (scalaProps, jsPropsToScala) match {
      case (Some(jsprops), _) => jsprops
      case (None, Some(toScalaProps)) => ScalaElement(toScalaProps(props))
      case (None, None) =>
        throw new IllegalStateException(s"A JS component called scala component $debugName " +
          "which didn't implement the JS->Scala React props conversion.")
    }
  }

  /** Indicates no props for createDomElement. */
  val noProps = new js.Object()

  /** Create a DOM element. */
  def createDomElement(n: String, props: js.Object|js.Dynamic, children: ReactElement*): ReactElement = {
    JSReact.createElement(n, props.asInstanceOf[js.Object], children:_*)
  }

  /**
   * Scala side version of React.createElement given a scala-side ComponentSpec.
   * Obviously, it must call React.createElement. If component is a scala-side wrapper
   * around a js component, create the js component. No children are allowed
   * in this function. We call this "element" instead of "createElement" to make
   * it shorter to type if you are not using JSX. Do not use this if you not
   * have a scala side component.
   */
  def element[S, RP, A](component: Component[S, RP, A],
    key: Option[String] = None, ref: Option[RefCb] = None): ReactElement = {
    component.jsElementWrapped match {
      case Some(func) => func(key, ref)
      case _ =>
        val props = js.Dictionary.empty[Any] // not js.Any!
        key.foreach(k => props("key") = k)
        ref.foreach(refcb => props("ref") = refcb)
        props("scalaProps") = ScalaElement(component)
        JSReact.createElement(component.reactClassInternal, props)
    }
  }

  implicit class RichComponent[S, RP, A](c: Component[_,_,_]) {
    def toEl: ReactElement = element(c)
  }

  /** Convert *anything* to what you assert is a js.Any value. Very dangerous. */
  def toAny(o: scala.Any): js.Any = o.asInstanceOf[js.Any]

  /** Same comment as `toAny`. */
  def toDynamic(o: scala.Any): js.Dynamic = o.asInstanceOf[js.Dynamic]

  /**
   * Scala side verson of React.createClass. Create a react "class" component that shims/proxies
   * our scala side methods.
   */
  def createClass[S, RP, A](debugName: String): ReactClass = {
    reactCreateClass(new CreateClassOpts[S, RP, A] {
      val displayName = debugName

      val  mkSelf = (thisJs, s, p) => {
        println(s"$debugName:CreateClasOpts.mkself $s, $p")
        Self(s, p,
          action => thisJs.sendMethod(thisJs, action),
          //(cb, payload) => thisJs.reduceMethod(thisJs, cb, payload)
          cb => thisJs.handleMethod(thisJs, cb)
        )
      }

      def transitionNextTotalState(curTotalState: TotalState[S, RP, A],
        scalaStateUpdate: StateUpdate[S, RP, A]): TotalState[S, RP, A] = {
        scalaStateUpdate match {
          case NoUpdate() => curTotalState
          case Update(nextScalaState) =>
            new TotalState(
              nextScalaState,
              curTotalState.scalaStateVersion + 1,
              curTotalState.scalaStateVersionUsedToComputeSubelements,
              curTotalState.sideEffects)
          case SilentUpdate(nextScalaState) =>
            new TotalState(
              nextScalaState,
              curTotalState.scalaStateVersion + 1,
              curTotalState.scalaStateVersionUsedToComputeSubelements + 1,
              curTotalState.sideEffects
            )
          case SideEffects(effect) =>
            new TotalState(
              curTotalState.scalaState,
              curTotalState.scalaStateVersion + 1,
              curTotalState.scalaStateVersionUsedToComputeSubelements + 1,
              Seq(effect) ++ curTotalState.sideEffects
            )
          case UpdateWithSideEffects(nextScalaState, effect) =>
            new TotalState(
              nextScalaState,
              curTotalState.scalaStateVersion + 1,
              curTotalState.scalaStateVersionUsedToComputeSubelements,
              Seq(effect) ++ curTotalState.sideEffects
            )
          case SilentUpdateWithSideEffects(nextScalaState, effect) =>
            new TotalState(
              nextScalaState,
              curTotalState.scalaStateVersion + 1,
              curTotalState.scalaStateVersionUsedToComputeSubelements + 1,
              Seq(effect) ++ curTotalState.sideEffects
            )
          case _ => curTotalState
        }
      }

      val componentWillReceiveProps = (thisJs, nextProps) => {
        println(s"$debugName:CreateClassOpts.componentWillReceiveProps: nextProps ${PrettyJson.render(nextProps)}")
        val newConvertedScalaProps = convertPropsIfTheyAreFromJs(nextProps, thisJs.jsPropsToScala.toOption, debugName)
        val ScalaElement(newComponent) = newConvertedScalaProps
        newComponent.willReceiveProps match {
          case Some(wrp) =>
            val oldJsProps = thisJs.props
            val oldConvertedScalaProps =
              if(nextProps == oldJsProps) newConvertedScalaProps
              else convertPropsIfTheyAreFromJs(oldJsProps, thisJs.jsPropsToScala.toOption, debugName)
            val ScalaElement(oldComponent) = oldConvertedScalaProps
            thisJs.setState(thisJs, (curTotalState, _) => {
              val curScalaState = curTotalState.scalaState
              val curScalaStateVersion = curTotalState.scalaStateVersion
              val os = thisJs.mkSelf(thisJs, curScalaState, oldComponent.retainedProps)
              val nextScalaState = wrp(os)
              val nextScalaStateVersion =
                if(nextScalaState != curScalaState) curScalaStateVersion + 1
                else curScalaStateVersion
              // figure out which TotalState to return
              if(nextScalaStateVersion != curScalaStateVersion) {
                new TotalState[S, RP, A](
                  nextScalaState,
                  nextScalaStateVersion,
                  curTotalState.scalaStateVersionUsedToComputeSubelements,
                  //val sideEffects = nextScalaState.sideEffects // this is what .re had but sideEffects is on TotalState
                  curTotalState.sideEffects
                )
              }
              else {
                curTotalState
              }
            })
          case _ => // do nothing
        }
      }

      val componentDidUpdate = (thisJs, prevProps, prevState) => {
        println(s"$debugName:CreateClassOpts.componentDidUpdate:\nprevProps ${PrettyJson.render(prevProps)}\nprevState: ${PrettyJson.render(prevState)}")
        val newJsProps = thisJs.props
        val curState = thisJs.state
        val curScalaState = curState.scalaState
        val newConvertedScalaProps = convertPropsIfTheyAreFromJs(newJsProps, thisJs.jsPropsToScala.toOption, debugName)
        val ScalaElement(newComponent) = newConvertedScalaProps

        newComponent.didUpdate match {
          case Some(du) =>
            val ScalaElement(oldComponent) =
              if(prevProps == newJsProps) newConvertedScalaProps
              else convertPropsIfTheyAreFromJs(prevProps, thisJs.jsPropsToScala.toOption, debugName)
            val prevScalaState = prevState.scalaState
            val ns = thisJs.mkSelf(thisJs, curScalaState, newComponent.retainedProps)
            val os = thisJs.mkSelf(thisJs, prevScalaState, oldComponent.retainedProps)
            du(new OldNewSelf[S, RP, A] { val oldSelf = os; val newSelf = ns } )
          case _ => // do nothing!
        }
      }

      val componentDidMount =  thisJs => {
        println(s"$debugName:CreateClassOpts.componentDidMount")
        val ScalaElement(component) =
          convertPropsIfTheyAreFromJs(thisJs.props, thisJs.jsPropsToScala.toOption, debugName)
        val curTotalState = thisJs.state
        val curScalaState = curTotalState.scalaState
        val self = thisJs.mkSelf(thisJs, curScalaState, component.retainedProps)

        // handle subscriptions
        // ...

        component.didMount match {
          case Some(dm) =>
            val scalaStateUpdate = dm(self)
            val nextTotalState = thisJs.transitionNextTotalState(curTotalState, scalaStateUpdate)
            println(s"$debugName:CreateClassOpts.componentDidMount:\nnext: ${PrettyJson.render(nextTotalState)},\ncurrent: ${PrettyJson.render(curTotalState)}")
            if(nextTotalState.scalaStateVersion != curTotalState.scalaStateVersion)
              thisJs.setState(thisJs, (_, _) => nextTotalState)
          case _ => // do nothing!
        }
      }

      val getInitialState =  thisJs => {
        val ScalaElement(component) = convertPropsIfTheyAreFromJs(thisJs.props, thisJs.jsPropsToScala.toOption, debugName)
        val x = new TotalState[S, RP, A](component.initialState.flatMap(_(())), 1, 1, Seq())
        //println(s"$debugName:getInitialState ${PrettyJson.render(x)}, ${component.initialState.flatMap(_())}")
        x
      }

      val sendMethod = (thisJs, action) => {
        println(s"$debugName:CreateClasOpts.sendMethod: $action")
        val convertedScalaProps = convertPropsIfTheyAreFromJs(thisJs.props, thisJs.jsPropsToScala.toOption, debugName)
        val ScalaElement(component) = convertedScalaProps
        // Allow side-effects to be executed here. Return inside of setState
        // means reactjs.setStates will not update the state.
        thisJs.setState(thisJs, (curTotalState, _) => {
          val curScalaState = curTotalState.scalaState
          val scalaStateUpdate = component.reducer(action, curScalaState)
          if (scalaStateUpdate == NoUpdate()) null
          else {
            val nextTotalState = thisJs.transitionNextTotalState(curTotalState, scalaStateUpdate)
            if (nextTotalState.scalaStateVersion != curTotalState.scalaStateVersion) nextTotalState
            else null
          }
        })
      }

      val handleMethod = (thisJs, cb) => {
        println(s"$debugName:CreateClassOpts.handleMethod: $cb")
        val ScalaElement(component) = convertPropsIfTheyAreFromJs(thisJs.props, thisJs.jsPropsToScala.toOption, debugName)
        val curState = thisJs.state // this is the actual react js state, which is TotalState
        val curScalaState = curState.scalaState
        val self = thisJs.mkSelf(thisJs, curScalaState, component.retainedProps)
        cb(self)
      }

      //val reduceMethod = (thisJs, cb, payload) => {
      //  thisJs.sendMethod(thisJs, cb(payload))
      //}

      val render = thisJs => {
        // call the real render method!
        val ScalaElement(component) =
          convertPropsIfTheyAreFromJs(thisJs.props, thisJs.jsPropsToScala.toOption, debugName)
        // create the fake "self" structure for render
        val curState = thisJs.state // this is the actual react js state, which is TotalState
        val curScalaState = curState.scalaState
        val self = thisJs.mkSelf(thisJs, curScalaState, component.retainedProps)
        //println(s"$debugName:render: cur total state ${PrettyJson.render(curState)}")
        println(s"$debugName:CreateClassOpts.render: cur scala state ${self.state}")
        component.render(self)
      }
    })
  }

  /**
   * Create the component. You can override method later if you wish. Since this function call
   * creates the underlying react js class, you should only call this once per component and
   * use a "make" function to derive a new instance with your function overrides.
   */
  def basicComponent[S, RP, IRP, A](debugNameArg: String) = {
     ComponentSpec[S, RP, IRP, A] (
       debugName = debugNameArg,
       reactClassInternal = createClass[S, RP, A](debugNameArg),
       didMount = None,
       retainedProps = None,
       initialState = None,
       willReceiveProps = None,
       render = _ => stringToElement("Not Implemented"),
       reducer = (_: A, _: Option[S]) => NoUpdate[S, RP, A](),
       jsElementWrapped = None,
       didUpdate = None,
     )
  }

  /** Stateless component, no props. */
  def statelessComponent(debugName: String) =
    basicComponent[Stateless, NoRetainedProps, NoRetainedProps, Actionless](debugName)

  /** Stateless, with retained props. */
  def statelessComponentWithRetainedProps[RP](debugName: String) =
    basicComponent[Stateless, RP, NoRetainedProps, Actionless](debugName)

  /** Component with state. */
  def reducerComponent[S, A](debugName: String) =
    basicComponent[S, NoRetainedProps, NoRetainedProps, A](debugName)

  /** Component with state, with retainde props. */
  def reducerComponentWithRetainedProps[S, RP, A](debugName: String) =
    basicComponent[S, RP, NoRetainedProps, A](debugName)

  /**
   * Wrap a scala component to be used in js with react js. The js props
   * converter is attached to the js side component (see JsComponentThis).
   */
  def wrapScalaForJs[S, RP, A](component: Component[S, RP, A],
    jsPropsToScala: JsPropsToScala[S, RP, A]): ReactClass = {
    component.reactClassInternal.asInstanceOf[JsComponentThis[S, RP, RP, A]].jsPropsToScala = jsPropsToScala
    component.reactClassInternal
  }

  /**
   * Wrap a js side component for scala side usage. You still need to import reactClass
   * and write a "make" function to create your props from "make" parameters.
   */
  def wrapJsForScala[P <: js.Object](reactClass: ReactClass, props: P, children: ReactElement*): Component[Stateless, NoRetainedProps, Actionless] = {
    WrapProps.wrapJsForScala(reactClass, props, children:_*)
  }
}
