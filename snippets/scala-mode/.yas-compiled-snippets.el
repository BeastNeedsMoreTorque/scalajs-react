;;; Compiled snippets and support files for `scala-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'scala-mode
                     '(("styledreducer" "/**\n * Component ${1:enumerate}.\n */\nobject ${1:$(upcase yas/text)} {\n\n  @js.native\n  trait ClassNames extends IClassNamesTag {\n    val root: String = js.native\n  }\n\n  trait Styles extends IStyleSetTag {\n    var root: js.UndefOr[IStyle] = js.undefined\n  }\n\n  trait StyleProps extends js.Object {\n    var className: js.UndefOr[String] = js.undefined\n  }\n\n  val getStyles: IStyleFunction[StyleProps, Styles] = \n    props => new Styles {\n      root = stylearray(\n        \"your-$1\",\n        new IRawStyle {\n        })\n    }\n\n  def getClassNames(ss: Styles) = Styling.mergeStyleSets[ClassNames](ss)\n\n  \n  ${0}sealed trait Action\n  case class State\n  \n  val Name = \"$1\"\n  val c = reducerComponent[State, Action](Name)\n  import c.ops._\n\n  def make() =\n    c.copy(new methods {\n       val initialState = self => State()\n       val reducer = (action, state, gen) => {\n          action match {\n            case _ => gen.skip\n          }\n       }\n       val render = self => {\n          div(\"component $1\")\n       }\n    })\n}\n" "scalajs-react Reducer with Fabric component styling" nil nil nil "/home/glampshire/.emacs.d/snippets/scala-mode/styledreducer" nil nil)
                       ("stateless" "object ${1:enumerate} {\n  val Name = \"$1\"\n  val c = statelessComponent(Name)\n  import c.ops._\n\n  def make() =\n    render { self =>\n        val render = self => {\n        $1div(\"component $1\")\n        }\n    }\n}\n" "stateless" nil nil nil "/home/glampshire/.emacs.d/snippets/scala-mode/stateless" nil nil)
                       ("reducer" "object ${1:enumerate} {\n\n  ${0}sealed trait Action\n  case class State\n  \n  val Name = \"$1\"\n  val c = reducerComponent[State, Action](Name)\n  import c.ops._\n\n  def make() =\n    c.copy(new methods {\n       val initialState = self => State()\n       val reducer = (action, state, gen) => {\n          action match {\n            case _ => gen.skip\n          }\n       }\n       val render = self => {\n          div(\"component $1\")\n       }\n    })\n}\n" "reducer" nil nil nil "/home/glampshire/.emacs.d/snippets/scala-mode/reducer" nil nil)))


;;; Do not edit! File generated at Mon Oct 29 17:25:19 2018
