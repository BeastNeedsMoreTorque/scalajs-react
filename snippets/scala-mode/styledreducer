# -*- mode: snippet -*-
# Author: aappddeevv
# name: scalajs-react reducer component, fabric styling
# key: styledreducer
# --
/**
 * Component ${1:enumerate}.
 */
object $1 {

  @js.native
  trait ClassNames extends IClassNamesTag {
    val root: String = js.native
  }

  trait Styles extends IStyleSetTag {
    var root: js.UndefOr[IStyle] = js.undefined
  }

  trait StyleProps extends js.Object {
    var className: js.UndefOr[String] = js.undefined
  }

  val getStyles: IStyleFunction[StyleProps, Styles] = 
    props => new Styles {
      root = stylearray(
        "your-$1",
        new IRawStyle {
        })
    }

  def getClassNames(ss: Styles) = Styling.mergeStyleSets[ClassNames](ss)
  
  $0sealed trait Action
  case class State()
  
  val Name = "$1"
  val c = reducerComponent[State, Action](Name)
  import c.ops._

  def apply(
    rootClassName: js.UndefOr[String] = js.undefined,
    styles: js.UndefOr[IStyleFunctionOrObject[StyleProps, Styles]] = js.undefined
  ) =
    c.copy(new methods {
       val initialState = self => State()
       val reducer = (action, state, gen) => {
          action match {
            case _ => gen.skip
          }
       }
       val render = self => {
          val cn = getClassNames(resolve[StyleProps, Styles](new StyleProps {
             className = rootClassName
          }, getStyles, styles))

          div("component $1")
       }
    })
}
